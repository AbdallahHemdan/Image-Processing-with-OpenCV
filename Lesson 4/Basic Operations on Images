• You can modify the pixel values the same way : 

img[55,55] = [255 , 255, 255]

px = img[55 ,55] 
print(px)   #[255 255 255]    
____________________________________________________

• To know the Shape of image use img.shape : 

print(img.shape)
#(720,680,3)


Note: If image is grayscale, tuple returned contains only number of rows and columns.
So it is a good method to check if loaded image is grayscale or color image
____________________________________________________

•Total number of pixels is accessed by img.size : 

print(img.size)
#562248

____________________________________________________

• Image datatype is obtained by img.dtype
print(img.dtype)
#uint8

____________________________________________________

Image ROI
Sometimes, you will have to play with certain region of images. For eye detection in images, first perform face
detection over the image until the face is found, then search within the face region for eyes. This approach improves
accuracy (because eyes are always on faces :D ) and performance (because we search for a small area).
ROI is again obtained using Numpy indexing. Here I am selecting the ball and copying it to another region in the
image:

import cv2
import numpy as np

img = cv2.imread('messi5.jpg')

ball = img[280:340, 330:390]
img[273:333, 100:160] = ball

_____________________________________________________


Suppose, you want to make all the red pixels to zero,
you don't need to split like this and put it equal to zero. You can
simply use Numpy indexing which is faster.


img[:,:,2] = 0
